UPDATE TABLE "gsc_logical_service"
  DESCRIPTION "This table defines the logical services available to the application.

A logical service is a separate process running either locally or remotely that requires connection parameters to establish communication between the client and the service. 

Logical service names are unique so that connection to the service can be completely abstracted from the developer. 

The physical service will determine the actual connection parameters.

Which physical service is used is determined by combining the session type with the logical service.

Logical services for appserver service types would in fact be appserver partition names. Logical services for database connection service types would be the logical database name.

This table supports the registration of services and whether they are connected at start of a session is controlled by the connect_at_startup flag. This would typically be set to YES unless the service type is a webservice, in which case it would be NO typically due to the potential slow connection performance of webservices.

"

ADD FIELD "connect_at_startup" OF "gsc_logical_service" AS logical
  DESCRIPTION "This is a logical field that indicates whether the service should be connected at startup of a session. The default is YES. For webservice type connections this flag would typicaly set to NO and the webservice only connected to when required - due to the possible poor performance of webservice connections.
"
  FORMAT "YES/NO"
  FORMAT-SA ?
  POSITION 9
  INITIAL "YES"
  INITIAL-SA ?
  HELP "Connect at startup"
  HELP-SA ""
  LABEL "Connect at startup"
  LABEL-SA ?
  COLUMN-LABEL ?
  COLUMN-LABEL-SA ?
  CAN-READ "*"
  CAN-WRITE "*"
  VALEXP ?
  VALMSG "l_yesno"
  VALMSG-SA ""
  VIEW-AS "VIEW-AS TOGGLE-BOX"
  EXTENT 0
  DECIMALS ?
  ORDER 80
  NULL-ALLOWED
  NOT-CASE-SENSITIVE
  MAX-WIDTH 1

UPDATE TABLE "gsc_service_type"
  DESCRIPTION "This entity describes the different types of services available to applications and provides the management procedures for the different types of connections.

To illustrate, database services, AppServer services, Webservices and JMS partitions are all different service types. The Database, AppServer and Webservice services are system owned.

The maintenance object defines the datafield object used to maintain the physical connection parameter attribute on the physical service table. For example, if this is a service type for database connections, then the datafield may allow the specifiction of -S -N and -H prompts independantly and then put the result as 1 field into the connection parameter.

In the case of webservices there are many connection parameters, some of which are only known at runtime. To support this, the connection_parameters field on the physical service supports substitution lists. The substitution list contains token value lists delimited by CHR(1), the token and value are delimited by CHR(3).
The tokens are %parametername or a special token %DynUserID that is replaced by the Dynamics user id of the current user.  For example, tokens can be defined for parameters as follows:
WSDL UserId = %WSDLUserId
WSDL Password = %WSDLPassword
SOAPEndpoint UserId = %DynUserID
SOAPEndpoint Password = %SOAPEndpointPassword
MaxConnections = %maxConnections

The management object is the api procedure that is responsible for making the physical connections to the service.

In the case of an appserver partition, the default logical service could point at the default logical appserver partition to use.

"

UPDATE FIELD "connection_parameters" OF "gsm_physical_service"
  DESCRIPTION "This field contains the parameters required to make the physical connection to a service.

Where the connection parameter string contain multiple values, the values are delimited by CHR(1).

In the case of webservices there are many connection parameters, some of which are only known at runtime. To support this, the connection_parameters field supports substitution lists. The substitution list contains token value lists delimited by CHR(1), the token and value are delimited by CHR(3).

The tokens are %parametername or a special token %DynUserID that is replaced by the Dynamics user id of the current user.  For example, tokens can be defined for parameters as follows:
WSDL UserId = %WSDLUserId
WSDL Password = %WSDLPassword
SOAPEndpoint UserId = %DynUserID
SOAPEndpoint Password = %SOAPEndpointPassword
MaxConnections = MaxmaxConnections

This field is maintained by the maintenance object as identified in the service type table.
"

UPDATE TABLE "gsc_language_text"
  TABLE-TRIGGER "REPLICATION-CREATE" OVERRIDE PROCEDURE "icf/trg/gscltreplc.p" CRC "?"
  TABLE-TRIGGER "REPLICATION-DELETE" OVERRIDE PROCEDURE "icf/trg/gscltrepld.p" CRC "?"
  TABLE-TRIGGER "REPLICATION-WRITE" OVERRIDE PROCEDURE "icf/trg/gscltreplw.p" CRC "?"

UPDATE SEQUENCE "seq_ICFDB_DBVersion"
  MAX-VAL 102001

.
PSC
cpstream=UTF-8
.
0000004743
