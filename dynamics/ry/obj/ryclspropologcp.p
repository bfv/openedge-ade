&ANALYZE-SUSPEND _VERSION-NUMBER AB_v10r12
/* Procedure Description
"Data Logic Procedure Template

Use this template to create  a Data Logic Procedure."
*/
&ANALYZE-RESUME
{adecomm/appserv.i}
DEFINE VARIABLE h_Astra                    AS HANDLE          NO-UNDO.
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Check Version Notes Wizard" DataLogicProcedure _INLINE
/* Actions: af/cod/aftemwizcw.w ? ? ? ? */
/* MIP Update Version Notes Wizard
Check object version notes.
af/cod/aftemwizpw.w
*/
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Update-Object-Version" DataLogicProcedure _INLINE
/* Actions: ? ? ? ? af/sup/afverxftrp.p */
/* This has to go above the definitions sections, as that is what it modifies.
   If its not, then the definitions section will have been saved before the
   XFTR code kicks in and changes it */
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Definition Comments Wizard" DataLogicProcedure _INLINE
/* Actions: ? af/cod/aftemwizcw.w ? ? ? */
/* Program Definition Comment Block Wizard
Welcome to the Program Definition Comment Block Wizard. Press Next to proceed.
af/cod/aftemwizpw.w
*/
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS DataLogicProcedure 
/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation. All rights    *
* reserved. Prior versions of this work may contain portions         *
* contributed by participants of Possenet.                           *
*                                                                    *
*********************************************************************/
/*---------------------------------------------------------------------------------
  File: rytemlogic.p

  Description:  gsc_object_type Data Logic Procedure Library Template

  Purpose:      A procedure library (PLIP) to support the maintenance of the gsc_object_type table
                The following internal procedures may be added or modified
                to act as validation to creation, modification, or deletion of
                records in the database table
                
                Client-side:
                rowObjectValidate***
                
                Server-side upon create:
                createpreTransactionValidate***
                createBeginTransValidate
                createEndTransValidate
                createPostTransValidate
                
                Server-side upon write (create and modify):
                writepreTransactionValidate***
                writeBeginTransValidate
                writeEndTransValidate
                writePostTransValidate
                
                Server-side upon delete:
                deletepreTransactionValidate
                deleteBeginTransValidate
                deleteEndTransValidate
                deletePostTransValidate
                
                *** The rowObjectValidate, createpreTransactionValidate and writepreTransactionValidate
                internal procedures are automatically generated by the SDO generator

  Parameters:

  History:
  --------
  (v:010000)    Task:   101000047   UserRef:    
                Date:   09/28/2001  Author:     Johan Meyer

  Update Notes: Added function isFieldBlank to template of SDO Logic Procedure

  (v:010001)    Task:    90000119   UserRef:    posse
                Date:   06/05/2001  Author:     Haavard Danielsen

  Update Notes: Point to src/adm2/logic.i

---------------------------------------------------------------------------------*/
/*                   This .W file was created with the Progress UIB.             */
/*-------------------------------------------------------------------------------*/

/* ***************************  Definitions  ************************** */
/* MIP-GET-OBJECT-VERSION pre-processors
   The following pre-processors are maintained automatically when the object is
   saved. They pull the object and version from Roundtable if possible so that it
   can be displayed in the about window of the container */

&scop object-name       ryclspropologcp.p
DEFINE VARIABLE lv_this_object_name AS CHARACTER INITIAL "{&object-name}":U NO-UNDO.
&scop object-version    000000

/* object identifying preprocessor */
&glob   AstraPlip    yes

DEFINE VARIABLE cObjectName         AS CHARACTER NO-UNDO.

ASSIGN cObjectName = "{&object-name}":U.

&scop   mip-notify-user-on-plip-close   NO


/* Data Preprocessor Definitions */
&GLOB DATA-LOGIC-TABLE gsc_object_type
&GLOB DATA-FIELD-DEFS  "ry/obj/ryclspropo.i"

/* Error handling definitions */
{checkerr.i &define-only = YES}

{src/adm2/globals.i}
{ry/inc/ryrepatset.i}
/* Inlude containing the data types in integer form. */
{af/app/afdatatypi.i}
{destdefi.i}

/* Global var used for the query for performance reasons. */
DEFINE variable ghQuery            as handle             no-undo.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-PREPROCESSOR-BLOCK 

/* ********************  Preprocessor Definitions  ******************** */

&Scoped-define PROCEDURE-TYPE DataLogicProcedure
&Scoped-define DB-AWARE yes


/* Db-Required definitions. */
&IF DEFINED(DB-REQUIRED) = 0 &THEN
    &GLOBAL-DEFINE DB-REQUIRED TRUE
&ENDIF
&GLOBAL-DEFINE DB-REQUIRED-START   &IF {&DB-REQUIRED} &THEN
&GLOBAL-DEFINE DB-REQUIRED-END     &ENDIF





/* _UIB-PREPROCESSOR-BLOCK-END */
&ANALYZE-RESUME


/* ************************  Function Prototypes ********************** */

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION-FORWARD getFilterAvailable DataLogicProcedure 
FUNCTION getFilterAvailable RETURNS LOGICAL
        (  ) FORWARD.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION-FORWARD isFieldBlank DataLogicProcedure 
FUNCTION isFieldBlank RETURNS LOGICAL
  ( INPUT pcFieldValue AS CHARACTER )  FORWARD.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


/* *********************** Procedure Settings ************************ */

&ANALYZE-SUSPEND _PROCEDURE-SETTINGS
/* Settings for THIS-PROCEDURE
   Type: DataLogicProcedure
   Allow: 
   Frames: 0
   Add Fields to: Neither
   Other Settings: CODE-ONLY COMPILE APPSERVER DB-AWARE
 */
&ANALYZE-RESUME _END-PROCEDURE-SETTINGS

/* *************************  Create Window  ************************** */

&ANALYZE-SUSPEND _CREATE-WINDOW
/* DESIGN Window definition (used by the UIB) 
  CREATE WINDOW DataLogicProcedure ASSIGN
         HEIGHT             = 8.43
         WIDTH              = 55.6.
/* END WINDOW DEFINITION */
                                                                        */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _INCLUDED-LIB DataLogicProcedure 
/* ************************* Included-Libraries *********************** */

{src/adm2/logic.i}

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


 


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _MAIN-BLOCK DataLogicProcedure 


/* ***************************  Main Block  ******************************* */

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


/* **********************  Internal Procedures  *********************** */

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE destroyObject DataLogicProcedure 
PROCEDURE destroyObject :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    run super.
    
    delete object ghQuery no-error.
    ghQuery = ?.
    
    return.
END PROCEDURE.    /* destroyObject */

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE initializeObject DataLogicProcedure 
PROCEDURE initializeObject :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEFINE variable hContainerSource            as handle             no-undo.
    
    /* get my data */
    create query ghQuery.
    
    run super.
    
    run populateRelatedData in target-procedure.

    {get ContainerSource hContainerSource}.    
    subscribe procedure target-procedure to "populateRelatedData" in hContainerSource.    
    
    return.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE populateRelatedData DataLogicProcedure 
PROCEDURE populateRelatedData :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEFINE variable hContainerSource        as handle                 no-undo.
    DEFINE variable hDataSource             as handle                 no-undo.
    DEFINE variable hAttributeBuffer        as handle                 no-undo.
    DEFINE variable hSdoAttributeBuffer     as handle                 no-undo.
    DEFINE variable cClassName              as character              no-undo.
    
    DEFINE variable iRecordCount            as integer                no-undo.
    
    /* close the sdo query */
    {fn CloseQuery}.
    
    /* get the attribute information from somewhere */
    {get ContainerSource hContainerSource}.
    
    publish "getClassAttributeBuffer" from hContainerSource (output hAttributeBuffer).    
    if not valid-handle(hAttributeBuffer) then
        return.
    
    {get TempTableBuffer hSdoAttributeBuffer}.
    if not valid-handle(hSdoAttributeBuffer) then
        return.
    
    hSdoAttributeBuffer:empty-temp-table().
    
    /* fill the SDO's temp-table */
    ghQuery:set-buffers(hAttributeBuffer).
    ghQuery:query-prepare('for each ' + hAttributeBuffer:name).
    ghQuery:query-open().
       
    ghQuery:get-first().
    do while hAttributeBuffer:available:
        hSdoAttributeBuffer:buffer-create().
        hSdoAttributeBuffer:buffer-copy(hAttributeBuffer).
        hSdoAttributeBuffer:buffer-release().
        iRecordCount = iRecordCount + 1.
        
        ghQuery:get-next().
    end.   /* query attributes */
    ghQuery:query-close().
    
    delete object hAttributeBuffer no-error.
    
    {get DataSource hDataSource}.
    cClassName = {fnarg columnValue 'object_type_code' hDataSource}.    
    
    /* Set the RowsToBatch property to the actual number
       records in the resulting data set, so that the browser
       scrolls more smoothly.
     */
    {set RowsToBatch iRecordCount}.
    
    /* Add FF to the query (might not have been done yet) */
    if valid-handle(hDataSource) then
      {fn addForeignKey}.
    
    /* open the Sdo query */
    {fn OpenQuery}.    
    
    error-status:error = no.
    return.
END PROCEDURE.    /* populateRelatedData */

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE preTransactionValidate DataLogicProcedure 
PROCEDURE preTransactionValidate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEFINE variable hRDM                     as handle                    no-undo.
    DEFINE variable hAttributeTable          as handle                    no-undo.
    DEFINE variable hAttributeBuffer         as handle                    no-undo.
    DEFINE variable hContainer               as handle                    no-undo.
    DEFINE variable hDataSource              as handle                    no-undo.
    DEFINE variable dClassObj                as decimal                   no-undo.
    DEFINE variable cClassName               as character                 no-undo.
    DEFINE variable cCustomisingClassName    as character                 no-undo. 
    DEFINE variable cQueryString             as character                 no-undo.
    DEFINE variable cValues                  as character                 no-undo.
     
    empty temp-table ttStoreAttribute.
    
    /* Determine the class to save the attributes against.
       If there is a customizing class, then save against that class.
       Otherwise save against the current class.
     */
    {get ContainerSource hContainer}.
    publish "findCustomizingClass" from hContainer (output cCustomisingClassName).
    if cCustomisingClassName eq ? then
        cCustomisingClassName = ''.
    
    /* get the class that we're dealing with from the parent,
      because the foreign fields are not set up (even though the
      foreign values are to enable the toolbar).        
     */
    {get DataSource hDataSource}.
    cClassName = {fnarg columnValue 'object_type_code' hDataSource}.
    
    dClassObj = 0.
    /* save the new and the modified */
    for each rowObjUpd where
             rowObjUpd.RowMod = 'u' or
             rowObjUpd.RowMod = 'c' or
             rowObjUpd.RowMod = 'a' :
        
        /* find the classobj. */                 
        if dClassObj eq 0 then
        do:                 
            /* always store attributes at the customising class, if possible.
               if there is none, then store at the current class.
             */
            assign cQueryString = ' for each gsc_object_type where gsc_object_type.object_type_code = '
                                + (if cCustomisingClassName eq '' then quoter(cClassName) else quoter(cCustomisingClassName))
                                + ' no-lock '.
            if valid-handle(gshGenManager) then
                run getRecordDetail in gshGenManager ( input cQueryString, output cValues) no-error.
            
            assign dClassObj = decimal(entry(lookup("gsc_object_type.object_type_obj", cValues, chr(3)) + 1, cValues, chr(3))) no-error.
        end.    /* class obj = 0 */
        
        if dClassObj eq 0 then
        do:
            error-status:error = no.
            return {aferrortxt.i 'AF' '5' 'gsc_object_type' '?' '"class"'}.
        end.    /* no class */
                         
        create ttStoreAttribute.
        assign ttStoreAttribute.tAttributeParent = 'Class'
               ttStoreAttribute.tAttributeParentObj = dClassObj
               ttStoreAttribute.tAttributeLabel = rowObjUpd.tAttributeLabel.
        CASE rowObjUpd.tDataType:
            /*WHEN {&RAW-DATA-TYPE}       THEN ASSIGN tRawValue = rowObjUpd.tAttributeValue.*/
            WHEN {&LOGICAL-DATA-TYPE}   THEN ASSIGN ttStoreAttribute.tLogicalValue = logical(rowObjUpd.tAttributeValue).
            WHEN {&INTEGER-DATA-TYPE}   THEN ASSIGN ttStoreAttribute.tIntegerValue = integer(rowObjUpd.tAttributeValue).
            WHEN {&DECIMAL-DATA-TYPE}   THEN ASSIGN ttStoreAttribute.tDecimalValue = decimal(rowObjUpd.tAttributeValue).
            WHEN {&DATE-DATA-TYPE}      THEN ASSIGN ttStoreAttribute.tDateValue = date(rowObjUpd.tAttributeValue). 
            OTHERWISE                        ASSIGN ttStoreAttribute.tCharacterValue = rowObjUpd.tAttributeValue.
        END CASE.   /* DataType */        
    end.    /* A,U,C */
    
    if can-find(first ttStoreAttribute) and valid-handle(gshRepositoryManager) then
    do:
        hAttributeBuffer = buffer ttStoreAttribute:handle.
        hAttributeTable = ?.
        
        run storeAttributeValues in gshRepositoryManager (input              hAttributeBuffer,
                                                          input table-handle hAttributeTable) no-error.
        if return-value ne '' or error-status:error then
        do:
            error-status:error = no.
            return return-value.
        end.    /* error saving attributes */
    end.    /* there are records for deletion */
    
    /* reuse the table for deletions */
    empty temp-table ttStoreAttribute.
    
    /* save the deleted */
    for each rowObjUpd where
             rowObjUpd.RowMod = 'd':
        
        /* only delete attributes that exist at this class or its customising
           class.
           this will probably be checked in the ui too but don't depend on it.
         */
        if rowObjUpd.tWhereStored eq cClassName or
           rowObjUpd.tWhereStored eq cCustomisingClassName then
        do:
            /* always store attributes at the customising class, if possible.
               if there is none, then store at the current class.
             */
            assign cQueryString = ' for each gsc_object_type where gsc_object_type.object_type_code = '
                                + quoter(rowObjUpd.tWhereStored)
                                + ' no-lock '.
            if valid-handle(gshGenManager) then                                
                run getRecordDetail in gshGenManager ( input cQueryString, output cValues) no-error.
            
            assign dClassObj = decimal(entry(lookup("gsc_object_type.object_type_obj", cValues, chr(3)) + 1, cValues, chr(3))).
            
            if dClassObj eq 0 then
            do:
                error-status:error = no.
                return {aferrortxt.i 'AF' '5' 'gsc_object_type' '?' '"class"'}.
            end.    /* no class */
    
            create ttStoreAttribute.
            assign ttStoreAttribute.tAttributeParent = 'Class'
                   ttStoreAttribute.tAttributeParentObj = dClassObj
                   ttStoreAttribute.tAttributeLabel = rowObjUpd.tAttributeLabel.
                   /* no other fields needed for deletions */                
        end.    /* this class is being customised. */
    end.    /* deleted records */
    
    if can-find(first ttStoreAttribute) then
    do:
        hRDM = {fnarg getManagerHandle 'RepositoryDesignManager'}.
        if valid-handle(hRDM) then
        do:
            hAttributeBuffer = buffer ttStoreAttribute:handle.
            hAttributeTable = ?.
        
            run removeAttributeValues in hRDM (input              hAttributeBuffer,
                                               input table-handle hAttributeTable) no-error.
            if return-value ne '' or error-status:error then
            do:
                error-status:error = no.
                return return-value.
            end.    /* error from delete */
        end.    /* valid design manager */
    end.    /* there are records for deletion */
    
    error-status:error = no.
    return.
END PROCEDURE.    /* beginTransactionValidate */

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE startFilter DataLogicProcedure 
PROCEDURE startFilter :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEFINE variable hUpdateSource        as handle                      no-undo.
    {get UpdateSource hUpdateSource}.
    
    if valid-handle(hUpdateSource) then
        run toolbar in hUpdateSource ('Filter').
    
    return.
END PROCEDURE.    /* startFilter */

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

/* ************************  Function Implementations ***************** */

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION getFilterAvailable DataLogicProcedure 
FUNCTION getFilterAvailable RETURNS LOGICAL
        (  ):
/*------------------------------------------------------------------------------
  Purpose:  
        Notes:
------------------------------------------------------------------------------*/
    return yes.
END FUNCTION.    /* getFilterAvailable */

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION isFieldBlank DataLogicProcedure 
FUNCTION isFieldBlank RETURNS LOGICAL
  ( INPUT pcFieldValue AS CHARACTER ) :
/*------------------------------------------------------------------------------
  Purpose:  Checks whether a character field is blank
    Notes:  
------------------------------------------------------------------------------*/

  IF LENGTH(TRIM(pcFieldValue)) = 0 OR LENGTH(TRIM(pcFieldValue)) = ? THEN
    RETURN TRUE.
  ELSE
    RETURN FALSE.   /* Function return value. */

END FUNCTION.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

