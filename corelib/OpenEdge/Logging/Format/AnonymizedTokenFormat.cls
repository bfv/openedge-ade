/************************************************
Copyright (c) 2018-2019 by Progress Software Corporation. All rights reserved.
*************************************************/
/*------------------------------------------------------------------------
    File        : AnonymizedTokenFormat
    Purpose     : Anonymises (hashes) specific token values
    Syntax      : 
    Description : 
    Author(s)   : pjudge
    Created     : 2018-11-16
    Notes       : - Default property values are
                        HashAlgorithm       : SHA-256
                        AnonymizeTokens     : CP.QUID,CP.UID
                  
                  - The anonymised output follows the C crypt format as per https://en.wikipedia.org/wiki/Crypt_(C)
                    This takes the form of
                        $<id>$<salt>$<b64-hash>
                    
                    The <id> value represents the hashing algorithm, and is one of 
                        md5     : 1
                        sha-1   : sha1
                        sha-256 : 5
                        sha-512 : 6
                    
                    The <salt> value is a b64-encoded UUID generated by the AVM
  ----------------------------------------------------------------------*/
block-level on error undo, throw.

using OpenEdge.Core.Assert.
using OpenEdge.Core.Collections.IIterator.
using OpenEdge.Core.Collections.IList.
using OpenEdge.Core.HashAlgorithmEnum.
using OpenEdge.Core.String.
using OpenEdge.Core.Util.Token.
using OpenEdge.Logging.Filter.ILoggerFilter.
using OpenEdge.Logging.LogEvent.

class OpenEdge.Logging.Format.AnonymizedTokenFormat implements ILoggerFilter:
    
    // The mask to use for anonymising the token values 
    define private variable mMask as character no-undo.
    
    /* A comma-separated list of tokens to anonymize. */
    define public property AnonymizeTokens as character no-undo
        get.
        set.
    
    /* (optional) The algorithm used to hash the data */
    define public property HashAlgorithm as HashAlgorithmEnum no-undo
        get.
        private set.
    
    /* Default constructor */
    constructor public AnonymizedTokenFormat():
        this-object(HashAlgorithmEnum:SHA-256).
    end constructor.
    
    /* Constructor
       
       @param HashAlgorithmEnum The algorithm to use to has token data */
    constructor public AnonymizedTokenFormat(input pAlgorithm as HashAlgorithmEnum):
        this-object(pAlgorithm, 'CP.QUID,CP.UID':u).
    end constructor.
    
    /* Constructor
       
       @param HashAlgorithmEnum The algorithm to use to has token data
       @param character A CSV list of token to anonymise    */
    constructor public AnonymizedTokenFormat(input pAlgorithm as HashAlgorithmEnum,
                                             input pTokens as character):
        Assert:NotNull(pAlgorithm, 'Hash algorithm').
        Assert:NotNull(pTokens, 'Token list').
        
        assign this-object:HashAlgorithm   = pAlgorithm
               this-object:AnonymizeTokens = pTokens 
               .
        //mMask = $id$salt$hashed
        case this-object:HashAlgorithm:
            when HashAlgorithmEnum:MD5      then assign mMask = '$':u + string(1).
            when HashAlgorithmEnum:SHA-1    then assign mMask = '$':u + 'sha1':u.
            when HashAlgorithmEnum:SHA-256  then assign mMask = '$':u + string(5).
            when HashAlgorithmEnum:SHA-512  then assign mMask = '$':u + string(6).
            // in case we add others
            otherwise                            assign mMask = '$':u + lc(string(this-object:HashAlgorithm)).
        end case.
        assign mMask = mMask + '$&1$&2':u.
    end constructor.
    
    /** Performs implementation-specific filtering for a logger type
        
        @param LogEvent The current log event to filter */
    method public void ExecuteFilter(input pEvent as LogEvent):
        define variable ctx as Progress.Lang.Object no-undo.
        define variable val as Progress.Lang.Object no-undo.
        define variable iter as IIterator no-undo.
        define variable token as Token no-undo.
        define variable salt as character no-undo.
        
        // no tokens congfigured to anonymise
        if String:IsNullOrEmpty(this-object:AnonymizeTokens) then
            return.
        
        assign ctx = pEvent:Message:GetContext('tokens':u).
        if    not valid-object(ctx)
           or not type-of(ctx, IList)
           or cast(ctx, IList):Size eq 0
        then
            return.
        
        assign iter = cast(ctx, IList):Iterator().
        do while iter:HasNext():
            assign val = iter:Next().
            if    not valid-object(val)
               or not type-of(val, Token)
            then
                next.
            
            assign token = cast(val, Token).
            if    index(this-object:AnonymizeTokens, string(token)) eq 0 
               or token:Value eq ?
            then
                next.
            
            assign salt      = substring(base64-encode(generate-uuid), 1, 22)
                   //$id$salt$hashed
                   token:Value = substitute(mMask,
                                            salt,
                                            base64-encode(message-digest(string(this-object:HashAlgorithm),
                                                          token:Value,
                                                          salt ))
                                 )
                   .
        end.
    end method.
end class.